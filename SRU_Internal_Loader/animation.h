#include <string>
#include <vector>
#include <algorithm>

struct AnimationHolder
{
	std::string s;
	bool enabled = false;
};

std::string animationRaw[] {
	"                       _____/\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\\\\\\\______/\\\\\\________/\\\\\\_                                            \n",
	"                        ___/\\\\\\/////////\\\\\\__/\\\\\\///////\\\\\\___\\/\\\\\\_______\\/\\\\\\_                                           \n",
	"                         __\\//\\\\\\______\\///__\\/\\\\\\_____\\/\\\\\\___\\/\\\\\\_______\\/\\\\\\_                                          \n",
	"                          ___\\////\\\\\\_________\\/\\\\\\\\\\\\\\\\\\\\\\/____\\/\\\\\\_______\\/\\\\\\_                                         \n",
	"                           ______\\////\\\\\\______\\/\\\\\\//////\\\\\\____\\/\\\\\\_______\\/\\\\\\_                                        \n",
	"                            _________\\////\\\\\\___\\/\\\\\\____\\//\\\\\\___\\/\\\\\\_______\\/\\\\\\_                                       \n",
	"                             __/\\\\\\______\\//\\\\\\__\\/\\\\\\_____\\//\\\\\\__\\//\\\\\\______/\\\\\\__                                      \n",
	"                              _\\///\\\\\\\\\\\\\\\\\\\\\\/___\\/\\\\\\______\\//\\\\\\__\\///\\\\\\\\\\\\\\\\\\/___                                     \n",
	"  __/\\\\\\\\\\\\\\\\\\\\\\__________________\\///////////_____\\///________\\///_____\\/////////______________________/\\\\\\\\\\\\____        \n",
	"   _\\/////\\\\\\///________________________________________________________________________________________\\////\\\\\\____       \n",
	"    _____\\/\\\\\\_______________________/\\\\\\___________________________________________________________________\\/\\\\\\____      \n",
	"     _____\\/\\\\\\______/\\\\/\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\___/\\\\/\\\\\\\\\\\\\\___/\\\\/\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\_______\\/\\\\\\____     \n",
	"      _____\\/\\\\\\_____\\/\\\\\\////\\\\\\__\\////\\\\\\////____/\\\\\\/////\\\\\\_\\/\\\\\\/////\\\\\\_\\/\\\\\\////\\\\\\__\\////////\\\\\\______\\/\\\\\\____    \n",
	"       _____\\/\\\\\\_____\\/\\\\\\__\\//\\\\\\____\\/\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\___\\///__\\/\\\\\\__\\//\\\\\\___/\\\\\\\\\\\\\\\\\\\\_____\\/\\\\\\____   \n",
	"        _____\\/\\\\\\_____\\/\\\\\\___\\/\\\\\\____\\/\\\\\\_/\\\\__\\//\\\\///////___\\/\\\\\\_________\\/\\\\\\___\\/\\\\\\__/\\\\\\/////\\\\\\_____\\/\\\\\\____  \n",
	"         __/\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\___\\/\\\\\\____\\//\\\\\\\\\\____\\//\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_________\\/\\\\\\___\\/\\\\\\_\\//\\\\\\\\\\\\\\\\/\\\\__/\\\\\\\\\\\\\\\\\\_ \n",
	"          _\\///////////__\\///____\\///______\\/////______\\//////////__\\///__________\\///____\\///___\\////////\\//__\\/////////__\n",
};

AnimationHolder animation[17] = {};

void SetupAnimation()
{
	for (int i = 0; i < 17; i++)
	{
		AnimationHolder a;
		a.s = animationRaw[i];
		a.enabled = false;

		animation[i] = a;
	}
}

void AnimateIntro()
{
	SetupAnimation();

	int order[17];
	for (int i = 0; i < 17; i++)
	{
		order[i] = i;
	}
	
	std::random_shuffle(std::begin(order), std::end(order));

	system("COLOR 0A");
	system("cls");
	for (int i = 0; i < 17; i++)
	{
		Sleep(20);
		system("cls");

		animation[order[i]].enabled = true;

		for (int a = 0; a < 17; a++)
		{
			if (animation[a].enabled)
			{
				std::cout << animation[a].s;
			}
			else
			{
				std::cout << std::endl;
			}
		}
		
	}
}
